{"version":3,"file":"index.js","mappings":"mBAAA,MAAM,EAA+BA,OAAW,GAAoB,iBCA9D,EAA+BA,OAAc,MCA7C,EAA+BA,OAAW,GAAQ,KCAlD,EAA+BA,OAAW,GAAgB,aCAnDC,EAAsB,cCA7B,EAA+BD,OAAW,GAAc,WCKjDE,EAAyBA,KACrC,MAAMC,GAAwBC,EAAAA,EAAAA,YAAY,mBAAoB,MAE9D,IAAOD,EACN,MAAM,IAAIE,MAAO,oDAGlB,OAAOF,CAAqB,E,QCK7B,MAAMG,EAAUA,KACRC,EAAAA,EAAAA,eAAA,YAGFC,EAAwD,QAAtCC,EAAGP,KAA0BQ,iBAAS,IAAAD,EAAAA,EAAI,KAiClE,EA9BsB,CACrBE,KAAMV,EACNW,OACCL,EAAAA,EAAAA,eAAA,OAAKM,MAAO,CAAEC,QAAS,OAAQC,cAAe,MAAOC,OAAQ,MAAOC,WAAY,YAC/EV,EAAAA,EAAAA,eAAA,OACAW,UAAU,kCACVC,IAAM,GAAGX,4BACTY,KAAMC,EAAAA,EAAAA,gBACLnB,KAA0BoB,QAASC,EAAAA,EAAAA,IAAI,cAAe,mBAKzDC,uBAAuBD,EAAAA,EAAAA,IACtB,yBACA,eAEDE,WAAWJ,EAAAA,EAAAA,gBACVnB,KAA0BoB,QAC1BC,EAAAA,EAAAA,IAAI,0BAA2B,gBAEhCG,eAAgBA,KAAM,EACtBC,SAASpB,EAAAA,EAAAA,eAACD,EAAO,MACjBsB,MAAMrB,EAAAA,EAAAA,eAACD,EAAO,MACduB,gBAAiB5B,EACjB6B,SAAU,CACTC,SAA6C,QAArCC,EAAG9B,KAA0B4B,gBAAQ,IAAAE,EAAAA,EAAI,MCnCnDC,EAAAA,EAAAA,uBAAuBC,E","sources":["webpack://transactpay/external window [\"wc\",\"wcBlocksRegistry\"]","webpack://transactpay/external window \"React\"","webpack://transactpay/external window [\"wp\",\"i18n\"]","webpack://transactpay/external window [\"wp\",\"htmlEntities\"]","webpack://transactpay/./assets/blocks/payment-method/constant.js","webpack://transactpay/external window [\"wc\",\"wcSettings\"]","webpack://transactpay/./assets/blocks/utils.js","webpack://transactpay/./assets/blocks/payment-method/index.js","webpack://transactpay/./assets/blocks/index.js"],"sourcesContent":["const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wc\"][\"wcBlocksRegistry\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"React\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"i18n\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"htmlEntities\"];","export const PAYMENT_METHOD_NAME = 'transactpay';\nexport const PAYMENT_METHOD_VERSION = '1.0.0';","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wc\"][\"wcSettings\"];","/**\n * WooCommerce dependencies\n */\nimport { getSetting, WC_ } from '@woocommerce/settings';\n\nexport const getBlocksConfiguration = () => {\n\tconst transactpayServerData = getSetting( 'transactpay_data', null );\n\n\tif ( ! transactpayServerData ) {\n\t\tthrow new Error( 'Transactpay initialization data is not available' );\n\t}\n\n\treturn transactpayServerData;\n};\n\n/**\n * Creates a payment request using cart data from WooCommerce.\n *\n * @param {Object} Transactpay - The Transactpay JS object.\n * @param {Object} cart - The cart data response from the store's AJAX API.\n *\n * @return {Object} A Transactpay payment request.\n */\nexport const createPaymentRequestUsingCart = ( transactpay, cart ) => {\n\tconst options = {\n\t\ttotal: cart.order_data.total,\n\t\tcurrency: cart.order_data.currency,\n\t\tcountry: cart.order_data.country_code,\n\t\trequestPayerName: true,\n\t\trequestPayerEmail: true,\n\t\trequestPayerPhone: getBlocksConfiguration()?.checkout\n\t\t\t?.needs_payer_phone,\n\t\trequestShipping: !!cart.shipping_required,\n\t\tdisplayItems: cart.order_data.displayItems,\n\t};\n\n\tif ( options.country === 'PR' ) {\n\t\toptions.country = 'US';\n\t}\n\n\treturn transactpay.paymentRequest( options );\n};\n\n/**\n * Updates the given PaymentRequest using the data in the cart object.\n *\n * @param {Object} paymentRequest  The payment request object.\n * @param {Object} cart  The cart data response from the store's AJAX API.\n */\nexport const updatePaymentRequestUsingCart = ( paymentRequest, cart ) => {\n\tconst options = {\n\t\ttotal: cart.order_data.total,\n\t\tcurrency: cart.order_data.currency,\n\t\tdisplayItems: cart.order_data.displayItems,\n\t};\n\n\tpaymentRequest.update( options );\n};\n\n/**\n * Returns the Transactpay public key\n *\n * @throws Error\n * @return {string} The public api key for the Transactpay payment method.\n */\nexport const getPublicKey = () => {\n\tconst public_key = getBlocksConfiguration()?.public_key;\n\tif ( ! public_key ) {\n\t\tthrow new Error(\n\t\t\t'There is no public key available for Transactpay. Make sure it is available on the wc.transactpay_data.public_key property.'\n\t\t);\n\t}\n\treturn public_key;\n};","/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { decodeEntities } from '@wordpress/html-entities';\n\n/**\n * Internal dependencies\n */\nimport { PAYMENT_METHOD_NAME } from './constant';\nimport {\n\tgetBlocksConfiguration,\n} from 'wctransactpay/blocks/utils';\n\n/**\n * Content component\n */\nconst Content = () => {\n\treturn <div></div>;\n};\n\nconst TRANSACTPAY_ASSETS = getBlocksConfiguration()?.asset_url ?? null;\n\n\nconst paymentMethod = {\n\tname: PAYMENT_METHOD_NAME,\n\tlabel: (\n\t\t<div style={{ display: 'flex', flexDirection: 'row', rowGap: '0em', alignItems: 'center'}}>\n\t\t\t<img\n\t\t\tclassName='transactionpay-logo-on-checkout'\n\t\t\tsrc={ `${TRANSACTPAY_ASSETS}/img/budpay_checkout.png` }\n\t\t\talt={ decodeEntities(\n\t\t\t\tgetBlocksConfiguration()?.title || __( 'Transactpay', 'transactpay' )\n\t\t\t) }\n\t\t\t/>\n\t\t</div>\n\t),\n\tplaceOrderButtonLabel: __(\n\t\t'Proceed to Transactpay',\n\t\t'transactpay'\n\t),\n\tariaLabel: decodeEntities(\n\t\tgetBlocksConfiguration()?.title ||\n\t\t__( 'Payment via Transactpay', 'transactpay' )\n\t),\n\tcanMakePayment: () => true,\n\tcontent: <Content />,\n\tedit: <Content />,\n\tpaymentMethodId: PAYMENT_METHOD_NAME,\n\tsupports: {\n\t\tfeatures:  getBlocksConfiguration()?.supports ?? [],\n\t},\n}\n\nexport default paymentMethod;","/**\n * WooCommerce dependencies\n */\nimport {\n\tregisterPaymentMethod,\n} from '@woocommerce/blocks-registry';\n\n/**\n * Internal dependencies\n *\n * reference: https://github.com/woocommerce/woocommerce-blocks/blob/trunk/docs/third-party-developers/extensibility/checkout-payment-methods/payment-method-integration.md\n */\nimport paymentMethod from 'wctransactpay/blocks/payment-method';\n\n// Register Transactpay Payment Request.\nregisterPaymentMethod( paymentMethod );\n\n// TODO: implement a Direct Card payment method"],"names":["window","PAYMENT_METHOD_NAME","getBlocksConfiguration","transactpayServerData","getSetting","Error","Content","createElement","TRANSACTPAY_ASSETS","_getBlocksConfigurati","asset_url","name","label","style","display","flexDirection","rowGap","alignItems","className","src","alt","decodeEntities","title","__","placeOrderButtonLabel","ariaLabel","canMakePayment","content","edit","paymentMethodId","supports","features","_getBlocksConfigurati2","registerPaymentMethod","paymentMethod"],"sourceRoot":""}